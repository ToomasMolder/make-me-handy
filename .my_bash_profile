###################################################################
# Script Name   : .my_bash_profile
# Script version: 1.42
# Script date   : 2022-01-25
# Description   : Get my login and profile handy
# Usage         : /bin/cat ~/.my_bash_profile >> ~/.bash_profile; source ~/.bash_profile
# Author        : Toomas MÃ¶lder
# Email         : toomas.molder+makemehandy@gmail.com
###################################################################
#
# Additional notes:
#  ~/.profile has the stuff NOT specifically related to bash, such as environment variables (PATH and friends)
#  Anything that should be available to graphical applications OR to sh (or bash invoked as sh) MUST be in ~/.profile
#  Anything that should be available only to login shells should go in ~/.profile
#
# Sequence of scripts sourced upon login
# 
# When unning an interactive login shell the things you care about that are sourced when you log in are (and in this order):
# 1. The SSH daemon, via the pam_motd module of the PAM library, displays the contents of /etc/motd. 
#    Via the pam_env module, it sets the environment variables from /etc/environment and ~/.pam_environment.
# 2. A login shell is started, and the following files are read in order:
#    /etc/profile
#    /etc/bash.bashrc (the default Ubuntu /etc/profile sources /etc/bash.bashrc).
#    ~/.bash_profile. The other files that could have been read here (~/.profile and ~/.bash_login) are ignored because ~/.bash_profile exists.

# Load .my_env to be used some specific environments
if [ -f "${HOME}"/.my_env ]; then
  # shellcheck source=/dev/null
  source "${HOME}"/.my_env
fi

if [ -z "${EXCLUDE_LAST}" ]; then
  EXCLUDE_LAST="root"
fi

# export a different lighter colour for 'ls'
LS_COLORS='rs=0:di=1;35:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lz=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.axa=00;36:*.oga=00;36:*.spx=00;36:*.xspf=00;36:';
export LS_COLORS

# Load my colours
# TODO - study https://www.google.com/search?q=best+putty+color+scheme+for+eyes
#              https://ethanschoonover.com/solarized/
#              https://github.com/altercation/vim-colors-solarized
#              https://github.com/altercation/vim-colors-solarized/blob/master/colors/solarized.vim 
#              https://looselytyped.blogspot.com/2013/02/zenburn-pleasant-color-scheme-for-putty.html
#
if [ -x "${HOME}"/bin/colours.sh ]; then
  # shellcheck source=/dev/null
  source "${HOME}"/bin/colours.sh
else
  if [ -x /usr/bin/tput ]; then
     tput init
  else
     echo "WARNING: tput not available"
  fi

  black=$(/usr/bin/tput setaf 0) || true
  red=$(/usr/bin/tput setaf 1) || true
  green=$(/usr/bin/tput setaf 2) || true
  yellow=$(/usr/bin/tput setaf 3) || true
  blue=$(/usr/bin/tput setaf 4) || true
  magenta=$(/usr/bin/tput setaf 5) || true
  cyan=$(/usr/bin/tput setaf 6) || true
  white=$(/usr/bin/tput setaf 7) || true
  reset=$(/usr/bin/tput sgr0) || true
  export black red green yellow blue magenta cyan white reset
fi

# Echo some generic details about current host
echo "${red}=== HOST ===${reset}"; echo "$(/bin/hostname --long) [$(/bin/hostname --ip-address)]"
echo "${red}=== UPTIME ===${reset}"; /usr/bin/uptime
echo "${red}=== LAST ===${reset}"; /usr/bin/last --fulltimes --fullnames --since -30days | /bin/grep --extended-regexp --invert-match "${EXCLUDE_LAST}" | /usr/bin/head --lines=10
echo "${red}=== DF ===${reset}"; /bin/df --human-readable
echo "${red}=== SCREEN ===${reset}"; /usr/bin/screen -ls
# read -p "Press Ctrl-C to break or any key to continue with 'htop' ... " -n1 -s; echo;
# /usr/bin/htop
#
# Logs-specific
host=$(/bin/hostname --short)
if [[ "${host}" == *"logs"* ]]; then
   echo "Some logs-specific variables"
   year=$(/bin/date +%Y); echo "set year = ${year}"
   # Set today and yesterday as longnum, without delimiter
   yesterday_num="$(/bin/date --date=yesterday '+%Y%m%d')"; echo "set yesterday_num = ${yesterday_num}"
   today_num=$(/bin/date +%Y%m%d); echo "set today_num = ${today_num}"
   # Set today and yesterday as directories, with delimiter slash (/)
   yesterday_dir="$(/bin/date --date=yesterday '+%Y/%m/%d')"; echo "set yesterday_dir = ${yesterday_dir}"
   today_dir=$(/bin/date +%Y/%m/%d); echo "set today_dir = ${today_dir}"
   # Set today and yesterday with delimiter minus (-)
   yesterday="$(/bin/date --date=yesterday '+%Y-%m-%d')"; echo "set yesterday = ${yesterday}"
   today=$(/bin/date +%Y-%m-%d); echo "set today = ${today}"
   # Export logs-specific variables
   export year yesterday_num today_num yesterday_dir today_dir yesterday today
fi